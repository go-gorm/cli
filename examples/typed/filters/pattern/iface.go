// Code generated by 'gorm.io/cli/gorm'. DO NOT EDIT.

package pattern

import (
	"context"
	"strings"

	"gorm.io/cli/gorm/typed"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

func QueryUser[T any](db *gorm.DB, opts ...clause.Expression) _QueryUserInterface[T] {
	return _QueryUserImpl[T]{
		Interface: typed.G[T](db, opts...),
	}
}

type _QueryUserInterface[T any] interface {
	typed.Interface[T]
	ByID(ctx context.Context, id int) (T, error)
}

type _QueryUserImpl[T any] struct {
	typed.Interface[T]
}

func (e _QueryUserImpl[T]) ByID(ctx context.Context, id int) (T, error) {
	var sb strings.Builder
	_params := make([]any, 0, 2)

	sb.WriteString("SELECT * FROM ? WHERE id=?")
	_params = append(_params, clause.Table{Name: clause.CurrentTable}, id)

	var result T
	err := e.Raw(sb.String(), _params...).Scan(ctx, &result)
	return result, err
}

func QueryOrder[T any](db *gorm.DB, opts ...clause.Expression) _QueryOrderInterface[T] {
	return _QueryOrderImpl[T]{
		Interface: typed.G[T](db, opts...),
	}
}

type _QueryOrderInterface[T any] interface {
	typed.Interface[T]
	ByNumber(ctx context.Context, no string) (T, error)
}

type _QueryOrderImpl[T any] struct {
	typed.Interface[T]
}

func (e _QueryOrderImpl[T]) ByNumber(ctx context.Context, no string) (T, error) {
	var sb strings.Builder
	_params := make([]any, 0, 2)

	sb.WriteString("SELECT * FROM ? WHERE number=?")
	_params = append(_params, clause.Table{Name: clause.CurrentTable}, no)

	var result T
	err := e.Raw(sb.String(), _params...).Scan(ctx, &result)
	return result, err
}
